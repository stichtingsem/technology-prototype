/*
 * Provider Catalogue API
 *
 * This API enables a learning application provider (or anyone who wants to sell products in a Marketplace) to provide information about their products to a Marketplace.  It is envisaged that the service implementing this API, also implements the generic [Events](https://stichtingsem.stoplight.io/docs/sem-technology-prototype/reference/events.v1.yaml) and [Webhooks](https://stichtingsem.stoplight.io/docs/sem-technology-prototype/reference/webhooks.v1.yaml) API to enable subscription to changes vs polling.  ## Scopes and Data  It is envisaged that when a connection is made between a Marketplace and a Learning Application, that the API Key then provided is connected to that specific marketplace.   This connection ensures that the Learning Application can provide information that may be specific to commercial agreements with a specific marketplace (e.g. pricing information).  This specification provides the placeholders for this information to be exchanged, but has no restriction on what is agreed between parties offline.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
   /// <summary>
   /// The model under which a product can be sold in the marketplace, this is later communicated back at the point of selection so that the provider understands what additional steps may need to be taken (depending on the business model selected).  The list of possible models is not defined within this specification, it is entirely up to each Marketplace and Provider to agree.
   /// </summary>
   [DataContract]
   public partial class BusinessModel : IEquatable<BusinessModel>
   {
      /// <summary>
      /// Unique identifier of the business model recognised by both the marketplace and the learning application.
      /// </summary>
      /// <value>Unique identifier of the business model recognised by both the marketplace and the learning application.</value>
      [Required]
      [DataMember(Name = "id")]
      public string Id { get; set; }

      /// <summary>
      /// A description of the business model so it can be displayed in the Marketplace or LMS if needed. 
      /// </summary>
      /// <value>A description of the business model so it can be displayed in the Marketplace or LMS if needed. </value>
      [Required]
      [DataMember(Name = "name")]
      public string Name { get; set; }

      /// <summary>
      /// A longer description of the business model - used optionally for display in the marketplace if needed.
      /// </summary>
      /// <value>A longer description of the business model - used optionally for display in the marketplace if needed.</value>
      [DataMember(Name = "description")]
      public string Description { get; set; }

      /// <summary>
      /// The price under which it is sold under this model, this may be exchanged via other mechanisms between parties, so is optional. 
      /// </summary>
      /// <value>The price under which it is sold under this model, this may be exchanged via other mechanisms between parties, so is optional. </value>
      [DataMember(Name = "price")]
      public decimal? Price { get; set; }

      /// <summary>
      /// The period the price applies to (optional - for recurring subscriptions; e.g. month, year). 
      /// </summary>
      /// <value>The period the price applies to (optional - for recurring subscriptions; e.g. month, year). </value>
      [DataMember(Name = "price_period")]
      public string PricePeriod { get; set; }

      /// <summary>
      /// EUR etc. 
      /// </summary>
      /// <value>EUR etc. </value>
      [DataMember(Name = "price_currency")]
      public string PriceCurrency { get; set; }

      /// <summary>
      /// Returns the string presentation of the object
      /// </summary>
      /// <returns>String presentation of the object</returns>
      public override string ToString()
      {
         var sb = new StringBuilder();
         sb.Append("class BusinessModel {\n");
         sb.Append("  Id: ").Append(Id).Append("\n");
         sb.Append("  Name: ").Append(Name).Append("\n");
         sb.Append("  Description: ").Append(Description).Append("\n");
         sb.Append("  Price: ").Append(Price).Append("\n");
         sb.Append("  PricePeriod: ").Append(PricePeriod).Append("\n");
         sb.Append("  PriceCurrency: ").Append(PriceCurrency).Append("\n");
         sb.Append("}\n");
         return sb.ToString();
      }

      /// <summary>
      /// Returns the JSON string presentation of the object
      /// </summary>
      /// <returns>JSON string presentation of the object</returns>
      public string ToJson()
      {
         return JsonConvert.SerializeObject(this, Formatting.Indented);
      }

      /// <summary>
      /// Returns true if objects are equal
      /// </summary>
      /// <param name="obj">Object to be compared</param>
      /// <returns>Boolean</returns>
      public override bool Equals(object obj)
      {
         if (ReferenceEquals(null, obj)) return false;
         if (ReferenceEquals(this, obj)) return true;
         return obj.GetType() == GetType() && Equals((BusinessModel)obj);
      }

      /// <summary>
      /// Returns true if BusinessModel instances are equal
      /// </summary>
      /// <param name="other">Instance of BusinessModel to be compared</param>
      /// <returns>Boolean</returns>
      public bool Equals(BusinessModel other)
      {
         if (ReferenceEquals(null, other)) return false;
         if (ReferenceEquals(this, other)) return true;

         return
             (
                 Id == other.Id ||
                 Id != null &&
                 Id.Equals(other.Id)
             ) &&
             (
                 Name == other.Name ||
                 Name != null &&
                 Name.Equals(other.Name)
             ) &&
             (
                 Description == other.Description ||
                 Description != null &&
                 Description.Equals(other.Description)
             ) &&
             (
                 Price == other.Price ||
                 Price != null &&
                 Price.Equals(other.Price)
             ) &&
             (
                 PricePeriod == other.PricePeriod ||
                 PricePeriod != null &&
                 PricePeriod.Equals(other.PricePeriod)
             ) &&
             (
                 PriceCurrency == other.PriceCurrency ||
                 PriceCurrency != null &&
                 PriceCurrency.Equals(other.PriceCurrency)
             );
      }

      /// <summary>
      /// Gets the hash code
      /// </summary>
      /// <returns>Hash code</returns>
      public override int GetHashCode()
      {
         unchecked // Overflow is fine, just wrap
         {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (Id != null)
               hashCode = hashCode * 59 + Id.GetHashCode();
            if (Name != null)
               hashCode = hashCode * 59 + Name.GetHashCode();
            if (Description != null)
               hashCode = hashCode * 59 + Description.GetHashCode();
            if (Price != null)
               hashCode = hashCode * 59 + Price.GetHashCode();
            if (PricePeriod != null)
               hashCode = hashCode * 59 + PricePeriod.GetHashCode();
            if (PriceCurrency != null)
               hashCode = hashCode * 59 + PriceCurrency.GetHashCode();
            return hashCode;
         }
      }

      #region Operators
#pragma warning disable 1591

      public static bool operator ==(BusinessModel left, BusinessModel right)
      {
         return Equals(left, right);
      }

      public static bool operator !=(BusinessModel left, BusinessModel right)
      {
         return !Equals(left, right);
      }

#pragma warning restore 1591
      #endregion Operators
   }
}
