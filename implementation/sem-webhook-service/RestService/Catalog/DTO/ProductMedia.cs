/*
 * Provider Catalogue API
 *
 * This API enables a learning application provider (or anyone who wants to sell products in a Marketplace) to provide information about their products to a Marketplace.  It is envisaged that the service implementing this API, also implements the generic [Events](https://stichtingsem.stoplight.io/docs/sem-technology-prototype/reference/events.v1.yaml) and [Webhooks](https://stichtingsem.stoplight.io/docs/sem-technology-prototype/reference/webhooks.v1.yaml) API to enable subscription to changes vs polling.  ## Scopes and Data  It is envisaged that when a connection is made between a Marketplace and a Learning Application, that the API Key then provided is connected to that specific marketplace.   This connection ensures that the Learning Application can provide information that may be specific to commercial agreements with a specific marketplace (e.g. pricing information).  This specification provides the placeholders for this information to be exchanged, but has no restriction on what is agreed between parties offline.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
   /// <summary>
   /// A collection of media for use in the marketplace.
   /// </summary>
   [DataContract]
   public partial class ProductMedia : IEquatable<ProductMedia>
   {
      /// <summary>
      /// Gets or Sets MainThumbnailUrl
      /// </summary>
      [DataMember(Name = "mainThumbnailUrl")]
      public Media MainThumbnailUrl { get; set; }

      /// <summary>
      /// A collection of image urls for a product.
      /// </summary>
      /// <value>A collection of image urls for a product.</value>
      [DataMember(Name = "productImageUrls")]
      public List<Media> ProductImageUrls { get; set; }

      /// <summary>
      /// A collection of video urls for a product.
      /// </summary>
      /// <value>A collection of video urls for a product.</value>
      [DataMember(Name = "productVideoUrls")]
      public List<Media> ProductVideoUrls { get; set; }

      /// <summary>
      /// A collection of PDF links for a product.
      /// </summary>
      /// <value>A collection of PDF links for a product.</value>
      [DataMember(Name = "productPdfUrls")]
      public List<Media> ProductPdfUrls { get; set; }

      /// <summary>
      /// Returns the string presentation of the object
      /// </summary>
      /// <returns>String presentation of the object</returns>
      public override string ToString()
      {
         var sb = new StringBuilder();
         sb.Append("class ProductMedia {\n");
         sb.Append("  MainThumbnailUrl: ").Append(MainThumbnailUrl).Append("\n");
         sb.Append("  ProductImageUrls: ").Append(ProductImageUrls).Append("\n");
         sb.Append("  ProductVideoUrls: ").Append(ProductVideoUrls).Append("\n");
         sb.Append("  ProductPdfUrls: ").Append(ProductPdfUrls).Append("\n");
         sb.Append("}\n");
         return sb.ToString();
      }

      /// <summary>
      /// Returns the JSON string presentation of the object
      /// </summary>
      /// <returns>JSON string presentation of the object</returns>
      public string ToJson()
      {
         return JsonConvert.SerializeObject(this, Formatting.Indented);
      }

      /// <summary>
      /// Returns true if objects are equal
      /// </summary>
      /// <param name="obj">Object to be compared</param>
      /// <returns>Boolean</returns>
      public override bool Equals(object obj)
      {
         if (ReferenceEquals(null, obj)) return false;
         if (ReferenceEquals(this, obj)) return true;
         return obj.GetType() == GetType() && Equals((ProductMedia)obj);
      }

      /// <summary>
      /// Returns true if ProductMedia instances are equal
      /// </summary>
      /// <param name="other">Instance of ProductMedia to be compared</param>
      /// <returns>Boolean</returns>
      public bool Equals(ProductMedia other)
      {
         if (ReferenceEquals(null, other)) return false;
         if (ReferenceEquals(this, other)) return true;

         return
             (
                 MainThumbnailUrl == other.MainThumbnailUrl ||
                 MainThumbnailUrl != null &&
                 MainThumbnailUrl.Equals(other.MainThumbnailUrl)
             ) &&
             (
                 ProductImageUrls == other.ProductImageUrls ||
                 ProductImageUrls != null &&
                 ProductImageUrls.SequenceEqual(other.ProductImageUrls)
             ) &&
             (
                 ProductVideoUrls == other.ProductVideoUrls ||
                 ProductVideoUrls != null &&
                 ProductVideoUrls.SequenceEqual(other.ProductVideoUrls)
             ) &&
             (
                 ProductPdfUrls == other.ProductPdfUrls ||
                 ProductPdfUrls != null &&
                 ProductPdfUrls.SequenceEqual(other.ProductPdfUrls)
             );
      }

      /// <summary>
      /// Gets the hash code
      /// </summary>
      /// <returns>Hash code</returns>
      public override int GetHashCode()
      {
         unchecked // Overflow is fine, just wrap
         {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (MainThumbnailUrl != null)
               hashCode = hashCode * 59 + MainThumbnailUrl.GetHashCode();
            if (ProductImageUrls != null)
               hashCode = hashCode * 59 + ProductImageUrls.GetHashCode();
            if (ProductVideoUrls != null)
               hashCode = hashCode * 59 + ProductVideoUrls.GetHashCode();
            if (ProductPdfUrls != null)
               hashCode = hashCode * 59 + ProductPdfUrls.GetHashCode();
            return hashCode;
         }
      }

      #region Operators
#pragma warning disable 1591

      public static bool operator ==(ProductMedia left, ProductMedia right)
      {
         return Equals(left, right);
      }

      public static bool operator !=(ProductMedia left, ProductMedia right)
      {
         return !Equals(left, right);
      }

#pragma warning restore 1591
      #endregion Operators
   }
}
