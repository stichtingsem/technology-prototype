/*
 * Provider Catalogue API
 *
 * This API enables a learning application provider (or anyone who wants to sell products in a Marketplace) to provide information about their products to a Marketplace.  It is envisaged that the service implementing this API, also implements the generic [Events](https://stichtingsem.stoplight.io/docs/sem-technology-prototype/reference/events.v1.yaml) and [Webhooks](https://stichtingsem.stoplight.io/docs/sem-technology-prototype/reference/webhooks.v1.yaml) API to enable subscription to changes vs polling.  ## Scopes and Data  It is envisaged that when a connection is made between a Marketplace and a Learning Application, that the API Key then provided is connected to that specific marketplace.   This connection ensures that the Learning Application can provide information that may be specific to commercial agreements with a specific marketplace (e.g. pricing information).  This specification provides the placeholders for this information to be exchanged, but has no restriction on what is agreed between parties offline.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
   /// <summary>
   /// A product that is available for sale or selection within a marketplace.  This entity captures the basic commercial information needed for selection and sale.
   /// </summary>
   [DataContract]
   public partial class Product : IEquatable<Product>
   {
      /// <summary>
      /// The unique EAN for this product. 
      /// </summary>
      /// <value>The unique EAN for this product. </value>
      [Required]
      [DataMember(Name = "ean")]
      public string Ean { get; set; }

      /// <summary>
      /// Type of product 
      /// </summary>
      /// <value>Type of product </value>
      [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
      public enum TypeEnum
      {
         /// <summary>
         /// Enum PhysicalEnum for physical
         /// </summary>
         [EnumMember(Value = "physical")]
         PhysicalEnum = 0,
         /// <summary>
         /// Enum DigitalEnum for digital
         /// </summary>
         [EnumMember(Value = "digital")]
         DigitalEnum = 1,
         /// <summary>
         /// Enum BlendedEnum for blended
         /// </summary>
         [EnumMember(Value = "blended")]
         BlendedEnum = 2
      }

      /// <summary>
      /// Type of product 
      /// </summary>
      /// <value>Type of product </value>
      [Required]
      [DataMember(Name = "type")]
      public TypeEnum? Type { get; set; }

      /// <summary>
      /// Status of product 
      /// </summary>
      /// <value>Status of product </value>
      [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
      public enum StatusEnum
      {
         /// <summary>
         /// Enum ActiveEnum for active
         /// </summary>
         [EnumMember(Value = "active")]
         ActiveEnum = 0,
         /// <summary>
         /// Enum NotForSaleEnum for not-for-sale
         /// </summary>
         [EnumMember(Value = "not-for-sale")]
         NotForSaleEnum = 1
      }

      /// <summary>
      /// Status of product 
      /// </summary>
      /// <value>Status of product </value>
      [DataMember(Name = "status")]
      public StatusEnum? Status { get; set; }

      /// <summary>
      /// A short name
      /// </summary>
      /// <value>A short name</value>
      [Required]
      [DataMember(Name = "name")]
      public string Name { get; set; }

      /// <summary>
      /// The groupings (e.g method or methods) that this product is a part of.
      /// </summary>
      /// <value>The groupings (e.g method or methods) that this product is a part of.</value>
      [DataMember(Name = "streams")]
      public List<Stream> Streams { get; set; }

      /// <summary>
      /// The set of levels and subjects that this product is targeted at.
      /// </summary>
      /// <value>The set of levels and subjects that this product is targeted at.</value>
      [DataMember(Name = "levelSubjects")]
      public List<LevelSubjects> LevelSubjects { get; set; }

      /// <summary>
      /// Business models that are available for this product to be sold under. 
      /// </summary>
      /// <value>Business models that are available for this product to be sold under. </value>
      [Required]
      [DataMember(Name = "models")]
      public List<BusinessModel> Models { get; set; }

      /// <summary>
      /// Optional trial / preview URL.
      /// </summary>
      /// <value>Optional trial / preview URL.</value>
      [DataMember(Name = "trialAccessUrl")]
      public string TrialAccessUrl { get; set; }

      /// <summary>
      /// The default url used to access the product after selection or purchase.
      /// </summary>
      /// <value>The default url used to access the product after selection or purchase.</value>
      [Required]
      [DataMember(Name = "defaultAccessUrl")]
      public string DefaultAccessUrl { get; set; }

      /// <summary>
      /// Short description for display on search pages or other marketing blocks. 
      /// </summary>
      /// <value>Short description for display on search pages or other marketing blocks. </value>
      [Required]
      [DataMember(Name = "shortDescription")]
      public string ShortDescription { get; set; }

      /// <summary>
      /// Long description for display on a product page. 
      /// </summary>
      /// <value>Long description for display on a product page. </value>
      [DataMember(Name = "longDescription")]
      public string LongDescription { get; set; }

      /// <summary>
      /// Gets or Sets Media
      /// </summary>
      [DataMember(Name = "media")]
      public ProductMedia Media { get; set; }

      /// <summary>
      /// An array of related product ID&#x27;s (for display alongside a product in a marketplace). 
      /// </summary>
      /// <value>An array of related product ID&#x27;s (for display alongside a product in a marketplace). </value>
      [DataMember(Name = "relatedProducts")]
      public List<string> RelatedProducts { get; set; }

      /// <summary>
      /// A link to any other products that are included in this one if it is a package / bundle.
      /// </summary>
      /// <value>A link to any other products that are included in this one if it is a package / bundle.</value>
      [DataMember(Name = "bundledProducts")]
      public List<string> BundledProducts { get; set; }

      /// <summary>
      /// Returns the string presentation of the object
      /// </summary>
      /// <returns>String presentation of the object</returns>
      public override string ToString()
      {
         var sb = new StringBuilder();
         sb.Append("class Product {\n");
         sb.Append("  Ean: ").Append(Ean).Append("\n");
         sb.Append("  Type: ").Append(Type).Append("\n");
         sb.Append("  Status: ").Append(Status).Append("\n");
         sb.Append("  Name: ").Append(Name).Append("\n");
         sb.Append("  Streams: ").Append(Streams).Append("\n");
         sb.Append("  LevelSubjects: ").Append(LevelSubjects).Append("\n");
         sb.Append("  Models: ").Append(Models).Append("\n");
         sb.Append("  TrialAccessUrl: ").Append(TrialAccessUrl).Append("\n");
         sb.Append("  DefaultAccessUrl: ").Append(DefaultAccessUrl).Append("\n");
         sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
         sb.Append("  LongDescription: ").Append(LongDescription).Append("\n");
         sb.Append("  Media: ").Append(Media).Append("\n");
         sb.Append("  RelatedProducts: ").Append(RelatedProducts).Append("\n");
         sb.Append("  BundledProducts: ").Append(BundledProducts).Append("\n");
         sb.Append("}\n");
         return sb.ToString();
      }

      /// <summary>
      /// Returns the JSON string presentation of the object
      /// </summary>
      /// <returns>JSON string presentation of the object</returns>
      public string ToJson()
      {
         return JsonConvert.SerializeObject(this, Formatting.Indented);
      }

      /// <summary>
      /// Returns true if objects are equal
      /// </summary>
      /// <param name="obj">Object to be compared</param>
      /// <returns>Boolean</returns>
      public override bool Equals(object obj)
      {
         if (ReferenceEquals(null, obj)) return false;
         if (ReferenceEquals(this, obj)) return true;
         return obj.GetType() == GetType() && Equals((Product)obj);
      }

      /// <summary>
      /// Returns true if Product instances are equal
      /// </summary>
      /// <param name="other">Instance of Product to be compared</param>
      /// <returns>Boolean</returns>
      public bool Equals(Product other)
      {
         if (ReferenceEquals(null, other)) return false;
         if (ReferenceEquals(this, other)) return true;

         return
             (
                 Ean == other.Ean ||
                 Ean != null &&
                 Ean.Equals(other.Ean)
             ) &&
             (
                 Type == other.Type ||
                 Type != null &&
                 Type.Equals(other.Type)
             ) &&
             (
                 Status == other.Status ||
                 Status != null &&
                 Status.Equals(other.Status)
             ) &&
             (
                 Name == other.Name ||
                 Name != null &&
                 Name.Equals(other.Name)
             ) &&
             (
                 Streams == other.Streams ||
                 Streams != null &&
                 Streams.SequenceEqual(other.Streams)
             ) &&
             (
                 LevelSubjects == other.LevelSubjects ||
                 LevelSubjects != null &&
                 LevelSubjects.SequenceEqual(other.LevelSubjects)
             ) &&
             (
                 Models == other.Models ||
                 Models != null &&
                 Models.SequenceEqual(other.Models)
             ) &&
             (
                 TrialAccessUrl == other.TrialAccessUrl ||
                 TrialAccessUrl != null &&
                 TrialAccessUrl.Equals(other.TrialAccessUrl)
             ) &&
             (
                 DefaultAccessUrl == other.DefaultAccessUrl ||
                 DefaultAccessUrl != null &&
                 DefaultAccessUrl.Equals(other.DefaultAccessUrl)
             ) &&
             (
                 ShortDescription == other.ShortDescription ||
                 ShortDescription != null &&
                 ShortDescription.Equals(other.ShortDescription)
             ) &&
             (
                 LongDescription == other.LongDescription ||
                 LongDescription != null &&
                 LongDescription.Equals(other.LongDescription)
             ) &&
             (
                 Media == other.Media ||
                 Media != null &&
                 Media.Equals(other.Media)
             ) &&
             (
                 RelatedProducts == other.RelatedProducts ||
                 RelatedProducts != null &&
                 RelatedProducts.SequenceEqual(other.RelatedProducts)
             ) &&
             (
                 BundledProducts == other.BundledProducts ||
                 BundledProducts != null &&
                 BundledProducts.SequenceEqual(other.BundledProducts)
             );
      }

      /// <summary>
      /// Gets the hash code
      /// </summary>
      /// <returns>Hash code</returns>
      public override int GetHashCode()
      {
         unchecked // Overflow is fine, just wrap
         {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (Ean != null)
               hashCode = hashCode * 59 + Ean.GetHashCode();
            if (Type != null)
               hashCode = hashCode * 59 + Type.GetHashCode();
            if (Status != null)
               hashCode = hashCode * 59 + Status.GetHashCode();
            if (Name != null)
               hashCode = hashCode * 59 + Name.GetHashCode();
            if (Streams != null)
               hashCode = hashCode * 59 + Streams.GetHashCode();
            if (LevelSubjects != null)
               hashCode = hashCode * 59 + LevelSubjects.GetHashCode();
            if (Models != null)
               hashCode = hashCode * 59 + Models.GetHashCode();
            if (TrialAccessUrl != null)
               hashCode = hashCode * 59 + TrialAccessUrl.GetHashCode();
            if (DefaultAccessUrl != null)
               hashCode = hashCode * 59 + DefaultAccessUrl.GetHashCode();
            if (ShortDescription != null)
               hashCode = hashCode * 59 + ShortDescription.GetHashCode();
            if (LongDescription != null)
               hashCode = hashCode * 59 + LongDescription.GetHashCode();
            if (Media != null)
               hashCode = hashCode * 59 + Media.GetHashCode();
            if (RelatedProducts != null)
               hashCode = hashCode * 59 + RelatedProducts.GetHashCode();
            if (BundledProducts != null)
               hashCode = hashCode * 59 + BundledProducts.GetHashCode();
            return hashCode;
         }
      }

      #region Operators
#pragma warning disable 1591

      public static bool operator ==(Product left, Product right)
      {
         return Equals(left, right);
      }

      public static bool operator !=(Product left, Product right)
      {
         return !Equals(left, right);
      }

#pragma warning restore 1591
      #endregion Operators
   }
}
