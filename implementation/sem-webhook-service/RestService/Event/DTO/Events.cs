/*
 * Generic Event Stream API
 *
 * The proposed architecture for the new ecosystem is based on an Event model, where each provider of data to the ecosystem provides a mechanism for other participants to securely subscribe to events that are of interest to them.  The Event API is the mechanism, in conjunction with the Webhook API, that enables this event based notification mechanism to function reliably.  It enables subscribers to request events from the provider, and paginate through to the last place that it received a message.  Notes:   - Pagination is essential - using start and limit semantics.   - Limits should be imposed on page size.   - Order should always be reverese chronological.   - Filtering is available by matching specific event type.   - Providers should ensure that this API is cacheable or able to be retrieved at minimal cost, as it may be accessed a lot by consumers who are 'catching up'      > Note:  We may need to provide an API that creates a 'dummy' event list of all entities to enable an initial synchronisation of all data (e.g. a brand new LA that wants to do an initial synchronisation with data from the SIS) - this may be simpler than providing a GET requests for entities in the SIS itseelf (e.g. get students).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: clifton@infinitaslearning.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
   /// <summary>
   /// A list of events - reverse chronologically ordered, provided to enable subscribers to &#x27;catch up&#x27; on events they may have missed.
   /// </summary>
   [DataContract]
   public partial class Events : List<ModelEvent>, IEquatable<Events>
   {
      /// <summary>
      /// Returns the string presentation of the object
      /// </summary>
      /// <returns>String presentation of the object</returns>
      public override string ToString()
      {
         var sb = new StringBuilder();
         sb.Append("class Events {\n");
         sb.Append("}\n");
         return sb.ToString();
      }

      /// <summary>
      /// Returns the JSON string presentation of the object
      /// </summary>
      /// <returns>JSON string presentation of the object</returns>
      public new string ToJson()
      {
         return JsonConvert.SerializeObject(this, Formatting.Indented);
      }

      /// <summary>
      /// Returns true if objects are equal
      /// </summary>
      /// <param name="obj">Object to be compared</param>
      /// <returns>Boolean</returns>
      public override bool Equals(object obj)
      {
         if (ReferenceEquals(null, obj)) return false;
         if (ReferenceEquals(this, obj)) return true;
         return obj.GetType() == GetType() && Equals((Events)obj);
      }

      /// <summary>
      /// Returns true if Events instances are equal
      /// </summary>
      /// <param name="other">Instance of Events to be compared</param>
      /// <returns>Boolean</returns>
      public bool Equals(Events other)
      {
         if (ReferenceEquals(null, other)) return false;
         if (ReferenceEquals(this, other)) return true;

         return false;
      }

      /// <summary>
      /// Gets the hash code
      /// </summary>
      /// <returns>Hash code</returns>
      public override int GetHashCode()
      {
         unchecked // Overflow is fine, just wrap
         {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            return hashCode;
         }
      }

      #region Operators
#pragma warning disable 1591

      public static bool operator ==(Events left, Events right)
      {
         return Equals(left, right);
      }

      public static bool operator !=(Events left, Events right)
      {
         return !Equals(left, right);
      }

#pragma warning restore 1591
      #endregion Operators
   }
}
