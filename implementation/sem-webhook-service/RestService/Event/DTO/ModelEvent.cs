/*
 * Generic Event Stream API
 *
 * The proposed architecture for the new ecosystem is based on an Event model, where each provider of data to the ecosystem provides a mechanism for other participants to securely subscribe to events that are of interest to them.  The Event API is the mechanism, in conjunction with the Webhook API, that enables this event based notification mechanism to function reliably.  It enables subscribers to request events from the provider, and paginate through to the last place that it received a message.  Notes:   - Pagination is essential - using start and limit semantics.   - Limits should be imposed on page size.   - Order should always be reverese chronological.   - Filtering is available by matching specific event type.   - Providers should ensure that this API is cacheable or able to be retrieved at minimal cost, as it may be accessed a lot by consumers who are 'catching up'      > Note:  We may need to provide an API that creates a 'dummy' event list of all entities to enable an initial synchronisation of all data (e.g. a brand new LA that wants to do an initial synchronisation with data from the SIS) - this may be simpler than providing a GET requests for entities in the SIS itseelf (e.g. get students).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: clifton@infinitaslearning.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
   /// <summary>
   /// An event is a notification that something of interest has happened within a service, that, based on authorised scopes, a subscriber may then process.  This enables systems to communicate with each other in a loosely coupled way, where the event creator has no direct connection to any of the subscribing systems.  Typically an event will contain a basic data object that indicates what the state of the object is at the point at which the event is raised, but this is optional.  In the case that no data object exists it is intended that the subscribing system would call back to the provided API to retrieve the information.  By calling back at a future point you avoid a number of distributed system related issues:  - Ordering doesn&#x27;t matter, as when you call back you always get the latest version.  The biggest risk is you call back twice and get the same information twice - but you always have correct data. - Security can be checked again at the point of request, so even in the unlikely scenario that a subscriber authorization changes between an event being emitted and the call back occurring, the subscriber can only ever get data they are authorized to retrieve.
   /// </summary>
   [DataContract]
   public partial class ModelEvent : IEquatable<ModelEvent>
   {
      /// <summary>
      /// Gets or Sets Id
      /// </summary>
      [Required]
      [DataMember(Name = "id")]
      public Guid? Id { get; set; }

      /// <summary>
      /// Gets or Sets Type
      /// </summary>
      [Required]
      [DataMember(Name = "type")]
      public string Type { get; set; }

      /// <summary>
      /// Gets or Sets Created
      /// </summary>
      [DataMember(Name = "created")]
      public decimal? Created { get; set; }

      /// <summary>
      /// Gets or Sets Data
      /// </summary>
      [DataMember(Name = "data")]
      public Object Data { get; set; }

      /// <summary>
      /// The URL that can be called to get information about the event. 
      /// </summary>
      /// <value>The URL that can be called to get information about the event. </value>
      [Required]
      [DataMember(Name = "url")]
      public string Url { get; set; }

      /// <summary>
      /// Returns the string presentation of the object
      /// </summary>
      /// <returns>String presentation of the object</returns>
      public override string ToString()
      {
         var sb = new StringBuilder();
         sb.Append("class ModelEvent {\n");
         sb.Append("  Id: ").Append(Id).Append("\n");
         sb.Append("  Type: ").Append(Type).Append("\n");
         sb.Append("  Created: ").Append(Created).Append("\n");
         sb.Append("  Data: ").Append(Data).Append("\n");
         sb.Append("  Url: ").Append(Url).Append("\n");
         sb.Append("}\n");
         return sb.ToString();
      }

      /// <summary>
      /// Returns the JSON string presentation of the object
      /// </summary>
      /// <returns>JSON string presentation of the object</returns>
      public string ToJson()
      {
         return JsonConvert.SerializeObject(this, Formatting.Indented);
      }

      /// <summary>
      /// Returns true if objects are equal
      /// </summary>
      /// <param name="obj">Object to be compared</param>
      /// <returns>Boolean</returns>
      public override bool Equals(object obj)
      {
         if (ReferenceEquals(null, obj)) return false;
         if (ReferenceEquals(this, obj)) return true;
         return obj.GetType() == GetType() && Equals((ModelEvent)obj);
      }

      /// <summary>
      /// Returns true if ModelEvent instances are equal
      /// </summary>
      /// <param name="other">Instance of ModelEvent to be compared</param>
      /// <returns>Boolean</returns>
      public bool Equals(ModelEvent other)
      {
         if (ReferenceEquals(null, other)) return false;
         if (ReferenceEquals(this, other)) return true;

         return
             (
                 Id == other.Id ||
                 Id != null &&
                 Id.Equals(other.Id)
             ) &&
             (
                 Type == other.Type ||
                 Type != null &&
                 Type.Equals(other.Type)
             ) &&
             (
                 Created == other.Created ||
                 Created != null &&
                 Created.Equals(other.Created)
             ) &&
             (
                 Data == other.Data ||
                 Data != null &&
                 Data.Equals(other.Data)
             ) &&
             (
                 Url == other.Url ||
                 Url != null &&
                 Url.Equals(other.Url)
             );
      }

      /// <summary>
      /// Gets the hash code
      /// </summary>
      /// <returns>Hash code</returns>
      public override int GetHashCode()
      {
         unchecked // Overflow is fine, just wrap
         {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (Id != null)
               hashCode = hashCode * 59 + Id.GetHashCode();
            if (Type != null)
               hashCode = hashCode * 59 + Type.GetHashCode();
            if (Created != null)
               hashCode = hashCode * 59 + Created.GetHashCode();
            if (Data != null)
               hashCode = hashCode * 59 + Data.GetHashCode();
            if (Url != null)
               hashCode = hashCode * 59 + Url.GetHashCode();
            return hashCode;
         }
      }

      #region Operators
#pragma warning disable 1591

      public static bool operator ==(ModelEvent left, ModelEvent right)
      {
         return Equals(left, right);
      }

      public static bool operator !=(ModelEvent left, ModelEvent right)
      {
         return !Equals(left, right);
      }

#pragma warning restore 1591
      #endregion Operators
   }
}
