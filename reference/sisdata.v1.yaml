openapi: 3.0.0
info:
  title: Student Information System API
  version: '1.0'
  description: |
    This is an API provided by the SIS in the SEM ecosystem, and is designed to enable a SIS to make the core information about teachers, learners, subjects and groups available to the rest of the ecosystem in a security and privacy cocnious way.

    # Events

    It is envisaged that the service implementing this API, also implements the generic [Events](https://stichtingsem.stoplight.io/docs/sem-technology-prototype/reference/events.v1.yaml) and [Webhooks](https://stichtingsem.stoplight.io/docs/sem-technology-prototype/reference/webhooks.v1.yaml) API to enable subscription to changes vs polling.

    Events generated by the SIS API are connected to state changes for key entities:

     - `sis.enrollment` - A student has been enrolled, or their enrolment changed
     - `sis.student` - A student has been created or modified   
    - `sis.student-delivery` - A students delivery information has been created or modified     
     - `sis.teacher` - A teacher has been created or modified
     - `sis.group` - A group has been modified (this is an aggregate event) - this means that basic metadata changed, a student added/removed, a teacher added or removed or a student subject choice modified within a group.     
     
    > Note: Do we need enrollment? 

    # Privacy and Scopes
     
    Data from the SIS can be sensitive, and the events and APIs available to a requesting service depend on the scopes requested and approved during setup.  The following scopes exist for the SIS, and map to the following entities and attributes:

    `sis.student-teacher-group`

    This scope enables a requestor to get basic information about a user (student or teacher) to enable that platform to present appropriate information or a basic profile for them and understand what groups or subjects they are enrolled in or teach.

    ### Event Access

    |Events|Event Data|Rationale|
    |------|---------|
    |sis.student|id, eckId, name, school, enrollment, groups, subjects|To enable the requesting service to maintain a copy of basic (non-PII) student profile information|
    |sis.teacher|id, eckId, name, school, groups|To enable the requesting service to maintain a copy of basic (non-PII) teacher information|

    ### Data Visibility

    |Entity|Fields|Rationale|
    |------|---------|-----|
    |Student|id, eckId, name, school, enrollment, groups, subjects|To enable the requesting service to maintain a copy of basic (non-PII) student profile information|
    |Teacher|id, eckId, name, school, groups|To enable the requesting service to maintain a copy of basic (non-PII) teacher information|

    `sis.student-teacher-delivery`

    This scope enables a requestor to get additional information required to support the physical delivery of books or other material directly to an individual.  This exchange includes PII, and would be requested in addition the basic `sis.student-teacher-class` scope, so the following should be read as additive to that scope.

    We have a principle to never send PII in events or store in an event log, so this event is only a notification.  The subscribing system must call back to retrieve the information.
     
    > NOTE: Do we never deliver anything to teachers?

    ### Event Access

    |Events|Event Data|Rationale|
    |------|---------|
    |sis.student-delivery|id, eckId|This is a notification only, as there should be no PII sent in events - only accessed by API calls.|

    ### Data Visibility

    |Entity|Fields|Rationale|
    |------|---------|-----|
    |Student Delivery|dateOfBirth, emailAddress, postcode, houseNumber, firstname, surname, tussenvoegsel|To enable the requesting service to maintain a copy of contact and delivery information|
  contact:
    name: SEM
    url: 'https://stichtingsem.org/'
servers:
  - url: 'https://example.stichtingsem.org/api'
    description: entitlement
components:
  schemas:
    school:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
      title: ''
      x-tags:
        - school
    student:
      type: object
      x-tags:
        - student
        - school
        - group
        - enrollment
        - subject
      title: ''
      description: Access to non-sensitive student information for us in an LMS or LA.
      properties:
        id:
          type: string
        eckid:
          type: string
        display_name:
          type: string
          description: |
            This is a display name only, not necessarily (and ideally not) their full real name.
        school:
          $ref: '#/components/schemas/school'
        groups:
          type: array
          items:
            $ref: '#/components/schemas/group'
        subjectChoices:
          type: array
          items:
            $ref: '#/components/schemas/subject-choice'
      required:
        - id
        - school
    teacher:
      type: object
      x-tags:
        - teacher
        - group
        - school
      title: ''
      properties:
        id:
          type: string
        eckid:
          type: string
        display_name:
          type: string
          description: |
            A name used to refer to the teacher when displaying to them in an application, not necessarily their real name.
        school:
          $ref: '#/components/schemas/school'
        group:
          $ref: '#/components/schemas/group'
      required:
        - id
        - school
    group:
      type: object
      x-examples: {}
      x-tags:
        - group
        - student
        - teacher
        - subject
        - school
      description: A class or other grouping of students.
      title: group
      properties:
        id:
          type: string
        name:
          type: string
        school:
          $ref: '#/components/schemas/school'
        students:
          type: array
          items:
            $ref: '#/components/schemas/student'
        teachers:
          type: array
          items:
            $ref: '#/components/schemas/teacherOfGroup'
        subjectChoices:
          type: array
          items:
            $ref: '#/components/schemas/subject-choice'
        schoolYear:
          type: string
          description: A reference to the school year for this group.
      required:
        - id
        - name
        - school
        - schoolYear
    teacherOfGroup:
      type: object
      x-tags:
        - teacher
        - group
      description: ''
      title: teacherOfGroup
      properties:
        id:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        teacher:
          $ref: '#/components/schemas/teacher'
        group:
          $ref: '#/components/schemas/group'
        school:
          $ref: '#/components/schemas/school'
        schoolYear:
          type: string
          description: A reference to the school year for this assignment.
      required:
        - id
        - teacher
        - group
        - school
        - schoolYear
    enrollment:
      type: object
      x-tags:
        - student
        - school
        - enrollment
      properties:
        id:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        educationCode:
          type: string
          description: 'Officiële elementcode, bron: Ministerie van OCW'
        student:
          $ref: '#/components/schemas/student'
        school:
          $ref: '#/components/schemas/school'
        schoolYear:
          type: string
          description: A reference to the school year for this enrollment
      required:
        - id
        - student
        - school
        - schoolYear
    subject-choice:
      type: object
      title: ''
      x-tags:
        - subject
        - student
      properties:
        id:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        subjectCode:
          type: string
          description: 'Officiële elementcode, bron: Ministerie van OCW'
        schoolSubjectName:
          type: string
          description: Optional name of subject if different within specific school.
        level:
          type: string
          description: 'havo, vwo, etc.'
        student:
          $ref: '#/components/schemas/student'
        group:
          $ref: '#/components/schemas/group'
        school:
          $ref: '#/components/schemas/school'        
      required:
        - id
        - student
        - school
        - schoolYear
    student-delivery:
      title: student-delivery
      type: object
      description: Access to sensitive delivery information for a student.
      x-tags:
        - student
        - student-delivery
      properties:
        id:
          type: string
        eckid:
          type: string
        dateOfBirth:
          type: string
          format: date
        emailAddress:
          type: string
        postcode:
          type: string
        houseNumber:
          type: string
        firstname:
          type: string
          description: |
            Used for delivery
        surname:
          type: string
          description: |
            Used for delivery
        tussenvoegsel:
          type: string
          description: Used for delivery
  securitySchemes:
    API Key:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: ''
          refreshUrl: ''
          scopes:
            sis.student-teacher-group: 'Access to basic student, teacher and group information.'
            sis.student-teacher-delivery: Access to sensitive student and teacher delivery information.
paths:
  '/student/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get Student information by ID
      tags:
        - student
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/student'
      operationId: get-student-id
      description: 'Retrieve basic student information, including their groups and subject choices.'
      security:
        - API Key:
            - sis.student-teacher-group
      parameters:
        - schema:
            type: string
          in: query
          name: schoolYear
          description: 'Request data for this student about a specific school year, if not provided, default to current.'
  '/teacher/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get Teacher by ID
      tags:
        - teacher
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teacher'
      operationId: get-teacher-id
      security:
        - API Key:
            - sis.student-teacher-group
      description: 'Retrieve basic teacher information including the groups they teach.  '
      parameters:
        - schema:
            type: string
          in: query
          name: schoolYear
          description: 'Request data for this teacher about a specific school year, if not provided, default to current.'
  '/group/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get group by ID
      tags:
        - group
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group'
      operationId: get-group-id
      description: 'Retrieve information about a specific group by ID, this includes the teachers, students and their subject choices.'
      security:
        - API Key:
            - sis.student-teacher-group
  '/enrollment/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get Enrollment by ID
      tags:
        - enrollment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/enrollment'
      operationId: get-enrolment-id
      description: |-
        Get an Enrollmemnt by ID.

        > Do we need this?  Is it in some way useful?
      security:
        - API Key:
            - sis.student-teacher-group
  '/student/{id}/delivery-information':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get Student delivery information by ID
      tags:
        - student
        - student-delivery
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/student-delivery'
      operationId: get-student-id-delivery-information
      description: Retrieve privacy sensitive delivery information by ID - this entity is only available to a specific scope.
      security:
        - API Key:
            - sis.student-teacher-delivery
tags:
  - name: enrollment
  - name: group
  - name: student
  - name: student-delivery
  - name: teacher
