swagger: '2.0'
host: example.stichtingsem.org
basePath: /sem-api
schemes:
  - https
info:
  description: |-
    The proposed architecture for the new ecosystem is based on an Event model, where each provider of data to the ecosystem provides a mechanism for other participants to securely subscribe to events that are of interest to them.

        
    The Webhook API is the mechanism, in conjunction with the Event API, that enables this event based notification mechanism to function reliably.  It enables subscribers to create a webhook registration with the provider, so that the provider can send a POST to the provided URL when an event occurs.  

    This forms the 'near real time' element of the architecture, and enables subscribers to retrieve information on all changes immediately, while still retaining full control of when that data will be subsequently processed.

    Notes:
      - Ideally you would have one webhook registration per subscriber, but we should allow for multiple.
      - It should be possible to filter to only events you are interested in as part of the configuration, to avoid sending events that then need to be discarded.
      - Event filters should automatically be applied aligned with oauth scopes in place for the subscriber - e.g. don't allow events to go to a subscriber for entities that they are not allowed to access.
      
  version: 1.0.0
  title: Management of webhook subscription for real time events
  contact:
    email: clifton@infinitaslearning.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
tags:
  - name: webhooks
    description: Operations related to webhook management
paths:
  /api/webhook:
    get:
      tags:
        - webhooks
      description: retrieves list of webhooks registered
      operationId: listWebhooks
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/webhooks'
    post:
      tags:
        - webhooks
      description: creates or updates a webhook
      operationId: createUpdateWebhook
      produces:
        - application/json
      parameters:
        - in: body
          name: webhook
          schema:
            $ref: '#/definitions/webhook'
      responses:
        '200':
          description: OK
  '/api/webhook/{webhookId}':
    get:
      tags:
        - webhooks
      description: retrieves specific of webhook
      operationId: getWebhook
      produces:
        - application/json
      parameters:
        - in: path
          required: true
          name: webhookId
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/webhook'
    delete:
      tags:
        - webhooks
      description: deletes a webhook
      operationId: deleteWebhook
      parameters:
        - in: path
          required: true
          name: webhookId
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
definitions:
  webhooks:
    type: array
    items:
      type: object
      additionalProperties:
        $ref: '#/definitions/webhook'
  webhook:
    type: object
    required:
      - id
      - url
      - enabled_events
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      url:
        type: string
        example: 'http://lms.nl/api/webhook'
      enabled_events:
        type: array
        items:
          type: string
        example:
          - 'la:usage'
          - 'la:results'
securityDefinitions:
  API Key - 1:
    type: oauth2
    flow: application
    scopes: {}
